# vi:set list

snippet "\\([^\s]*)" "lambda function for given variable" r
(\\ `!p snip.rv = match.group(1)`$0 -> $1)
endsnippet

# Maybe

snippet mmap "Maybe.map"
Maybe.map 
endsnippet

snippet mwd "Maybe with default"
Maybe.withDefault
endsnippet

# RemoteData

snippet "[Rr]map" "Remote Data.map" rA
RemoteData.map 
endsnippet

snippet rwd "Remote Data with default"
RemoteData.withDefault 
endsnippet

snippet "[Rr][Dd]" "Remote Data" r
RemoteData
endsnippet

snippet "[Rr][Dd]\." "Remote Data" rA
RemoteData.
endsnippet
# Lists


snippet lmap "List with "
List.map $1
endsnippet

# Html
snippet div "Html Div"
div [$1] [$2]
endsnippet
	
# Some types

snippet WD "Webdata"
WebData
endsnippet


snippet M "maybe"
Maybe
endsnippet

snippet "[M]\." "Maybe." rA
Maybe.
endsnippet

snippet "[hH]\." "Html." rA
Html.
endsnippet

# Update Extra

snippet "[Uu](p(date)?)?\." "automatically upper case Update" rA
Update.
endsnippet

snippet "[uU]i(n(it?)?)?" "Init an update pipe" r
Update.init ${1:model}
endsnippet

snippet "[Uu]map" "If you happen to be using UpateExra" rA
Update.map 
endsnippet

snippet "[uU](pdate)?[iI]f" "Init an update pipe" r
Update.updateIf ${1:true} ${2}
endsnippet


# Cmd

snippet "[Cc]map" "Cmd map" r
Cmd.map 
endsnippet

# Debug

snippet crash "Debug.crash"
Debug.crash "$1"
endsnippet


snippet todo "Enter Elm 19 todo"
Debug.todo "${1}" ${2}
endsnippet

snippet log "Enter Elm debug log"
Debug.log "${1}" ${2}
endsnippet

# Tuple
snippet mapf "If you happen to be using UpateExra"
Tuple.mapFirst (\\${1:s} -> {$1 | ${2:var} = ${3:val} })
${0}
endsnippet

snippet "\{\}\|" "put cursor inside braces" rA
{ ${1} | ${2} }
endsnippet
